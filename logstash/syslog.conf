input {
  udp {
    port => 51514
    type => syslog
  }
}

filter {
  if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }
}


filter {
  if [syslog_program] == "dnsmasq" and [syslog_message] =~ ".+ query\[.+\] .+ from" {
      grok {
        match => { "syslog_message" => "%{POSINT:dnsmasq_thread} %{IP:dnsmasq_client}(?:/%{POSINT:dnsmasq_client_port}) query\[%{GREEDYDATA:dnsmasq_query_type}\] %{GREEDYDATA:dnsmasq_query_value} from %{GREEDYDATA:dnsmasq_from_client}" }
      }
  }
  if [dnsmasq_from_client] and [dnsmasq_query_type] != "PTR" {
    dns {
          reverse => ["dnsmasq_from_client"]
          action => "replace"
    }
  }
}

output {
  elasticsearch {
      hosts => ["elasticsearch:9200"]
      id => "elk_syslogs"
      index => "syslog-via-udp"
  }
  stdout { codec => rubydebug }
  syslog {
    host => "192.168.5.10"
    port => 514
    protocol => "udp"
    rfc => "rfc3164"
  }
}
